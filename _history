{"entries":[{"timestamp":1754207087692,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":182,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":202,"length1":41,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":229,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"vl6180.ts","value":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"}]},{"timestamp":1754207355093,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":227,"length1":15,"diffs":[[1,"namespace custom {\n"]]}]}]},{"timestamp":1754210046945,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":227,"length1":16,"diffs":[[1,"namespace VL {\n"]]}]}]},{"timestamp":1754210048730,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":227,"length1":19,"diffs":[[1,"namespace VL6 {\n"]]},{"start1":794,"length1":1716,"diffs":[[1,""]]}]}]},{"timestamp":1754210643958,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":168,"length1":17,"diffs":[[1," * Custom blocks\n"]]},{"start1":189,"length1":37,"diffs":[[1,"//% weight=100 color=#0fbc11 icon=\"\"\n"]]},{"start1":295,"length1":50,"diffs":[[1,"     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n"]]},{"start1":457,"length1":62,"diffs":[[1,"    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n"]]},{"start1":798,"length1":221,"diffs":[[1,""]]}]}]},{"timestamp":1754211053415,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":2521,"length1":38,"diffs":[[1,"    ret = read(RESULT__RANGE_VAL)\n"]]}]}]},{"timestamp":1754211605989,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":253,"length1":17,"diffs":[[1,"     * TODO: describe your function here\n"]]},{"start1":435,"length1":91,"diffs":[[1,""]]},{"start1":553,"length1":72,"diffs":[[1,"    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n"]]},{"start1":1029,"length1":1299,"diffs":[[1,"function initvl6180() {\n    if (read(SYSTEM__FRESH_OUT_OF_RESET) == 1) {\n        write1Byte(519, 1)\n        write1Byte(520, 1)\n        write1Byte(150, 0)\n"]]},{"start1":1213,"length1":1042,"diffs":[[1,"        write1Byte(151, 253)\n        write1Byte(227, 1)\n        write1Byte(228, 3)\n        write1Byte(229, 2)\n        write1Byte(230, 1)\n        write1Byte(231, 3)\n        write1Byte(245, 2)\n        write1Byte(217, 5)\n        write1Byte(219, 206)\n        write1Byte(220, 3)\n        write1Byte(221, 248)\n        write1Byte(159, 0)\n        write1Byte(163, 60)\n        write1Byte(183, 0)\n        write1Byte(187, 60)\n        write1Byte(178, 9)\n        write1Byte(202, 9)\n        write1Byte(408, 1)\n        write1Byte(432, 23)\n        write1Byte(429, 0)\n        write1Byte(255, 5)\n        write1Byte(256, 5)\n        write1Byte(409, 5)\n        write1Byte(422, 27)\n        write1Byte(428, 62)\n        write1Byte(423, 31)\n        write1Byte(48, 0)\n        write1Byte(SYSTEM__FRESH_OUT_OF_RESET, 0)\n"]]},{"start1":2012,"length1":67,"diffs":[[1,"function write1Byte(reg: number, value: number) {\n"]]},{"start1":2237,"length1":51,"diffs":[[1,"function read(数字: number) {\n"]]},{"start1":2307,"length1":13,"diffs":[[1,"        数字,\n"]]}]}]},{"timestamp":1754212205499,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":395,"length1":30,"diffs":[[1,"        \n"]]},{"start1":551,"length1":46,"diffs":[[1,"     * @param value describe value here, eg: 5\n"]]},{"start1":620,"length1":250,"diffs":[[1,"    export function readRange(value: number): number {\n        return 0\n"]]},{"start1":1051,"length1":44,"diffs":[[1,"function initvl6180(i2caddr: number) {\n"]]},{"start1":1279,"length1":72,"diffs":[[1,"        write1Byte(i2caddr, 0x097, 0xFD); // RANGE_SCALER = 253\n"]]},{"start1":1679,"length1":756,"diffs":[[1,"        writeReg(0x0DC, 0x03);\n        writeReg(0x0DD, 0xF8);\n        writeReg(0x09F, 0x00);\n        writeReg(0x0A3, 0x3C);\n        writeReg(0x0B7, 0x00);\n        writeReg(0x0BB, 0x3C);\n        writeReg(0x0B2, 0x09);\n        writeReg(0x0CA, 0x09);\n        writeReg(0x198, 0x01);\n        writeReg(0x1B0, 0x17);\n        writeReg(0x1AD, 0x00);\n        writeReg(0x0FF, 0x05);\n        writeReg(0x100, 0x05);\n        writeReg(0x199, 0x05);\n        writeReg(0x1A6, 0x1B);\n        writeReg(0x1AC, 0x3E);\n        writeReg(0x1A7, 0x1F);\n        writeReg(0x030, 0x00);\n"]]},{"start1":2238,"length1":0,"diffs":[[1,"        write1Byte(i2caddr, 0x207, 1)\n        write1Byte(i2caddr, 0x208, 1)\n        write1Byte(i2caddr, 150, 0)\n        // RANGE_SCALER = 253\n        write1Byte(i2caddr, 151, 253)\n        write1Byte(i2caddr, 227, 1)\n        write1Byte(i2caddr, 228, 3)\n        write1Byte(i2caddr, 229, 2)\n        write1Byte(i2caddr, 230, 1)\n        write1Byte(i2caddr, 231, 3)\n        write1Byte(i2caddr, 245, 2)\n        write1Byte(i2caddr, 217, 5)\n        write1Byte(i2caddr, 219, 206)\n        write1Byte(i2caddr, 220, 3)\n        write1Byte(i2caddr, 221, 248)\n        write1Byte(i2caddr, 159, 0)\n        write1Byte(i2caddr, 163, 60)\n        write1Byte(i2caddr, 183, 0)\n        write1Byte(i2caddr, 187, 60)\n        write1Byte(i2caddr, 178, 9)\n        write1Byte(i2caddr, 202, 9)\n        write1Byte(i2caddr, 408, 1)\n        write1Byte(i2caddr, 432, 23)\n        write1Byte(i2caddr, 429, 0)\n        write1Byte(i2caddr, 255, 5)\n        write1Byte(i2caddr, 256, 5)\n        write1Byte(i2caddr, 409, 5)\n        write1Byte(i2caddr, 422, 27)\n        write1Byte(i2caddr, 428, 62)\n        write1Byte(i2caddr, 423, 31)\n        write1Byte(i2caddr, 48, 0)\n"]]},{"start1":3899,"length1":0,"diffs":[[1,"function vl6180Range() {\n    write1Byte(SYSRANGE__START, 1)\n    basic.pause(1000)\n    let ret = read(RESULT__RANGE_VAL)\n    write1Byte(SYSTEM__INTERRUPT_CLEAR, 1)\n    return ret\n}\n"]]}]}]},{"timestamp":1754212539810,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":515,"length1":61,"diffs":[[1,"\n"]]}]}]},{"timestamp":1754213005117,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":189,"length1":37,"diffs":[[1,"//% weight=40 color=#0fbc11 icon=\"\"\n"]]}]}]},{"timestamp":1754213465733,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":189,"length1":42,"diffs":[[1,"//% weight=40 color=#D35B53 icon=\"\"\n"]]}]}]},{"timestamp":1754213762536,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":275,"length1":27,"diffs":[[1,"     * @param addr describe parameter here, eg: 5\n"]]}]}]},{"timestamp":1754219174422,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":275,"length1":30,"diffs":[[1,"     * @param addr , eg: 5\n"]]}]}]},{"timestamp":1754219180907,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":275,"length1":49,"diffs":[[1,"     * @param addr i2c, eg: 5\n"]]},{"start1":313,"length1":58,"diffs":[[1,"    //% block\n"]]}]}]},{"timestamp":1754219680322,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":258,"length1":11,"diffs":[[1,"     * TODO: 初始化\n"]]},{"start1":332,"length1":100,"diffs":[[1,"    //%  addr.min=0x07 addr.max=0x77 addr.defl=0x29 block\n"]]},{"start1":480,"length1":304,"diffs":[[1,"    //% block\n"]]}]}]},{"timestamp":1754220278403,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"vl6180.ts","patch":[{"start1":801,"length1":18,"diffs":[[1,"    //% weight=100\n"]]}]}]},{"timestamp":1754220399974,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":90,"length1":0,"diffs":[[1,"        \"radio\": \"*\",\n"]]}]}]},{"timestamp":1754221058540,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":69,"length1":20,"diffs":[[1,"        \"core\": \"*\",\n        \"microphone\": \"*\"\n"]]}]}]},{"timestamp":1754221066294,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":24,"length1":87,"diffs":[[1,"    \"description\": \"\",\n"]]},{"start1":201,"length1":64,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// 在此处添加您的代码\n"}]}],"snapshots":[{"timestamp":1754207087691,"editorVersion":"8.0.13","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"vl6180\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1754210046945,"editorVersion":"8.0.13","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"","README.md":"","vl6180.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","pxt.json":"{\n    \"name\": \"vl6180\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"vl6180.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754211852395,"editorVersion":"8.0.13","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"","README.md":"","vl6180.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * VL6180 blocks\n */\n//% weight=40 color=#0fbc11 icon=\"\"\nnamespace VL6180 {\n    /**\n     * TODO: 初始化\n     * @param addr describe parameter here, eg: 5\n     */\n    //% block\n    export function initVL6180(addr: number): void {\n        \n    }\n\n    exprot function setNewAddr(addr: number, newAddr: number):void {\n        \n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n\nconst SYSRANGE__START = 0x18\nconst RESULT__INTERRUPT_STATUS_GPIO = 0x4F\nconst RESULT__RANGE_VAL = 0x62\nconst SYSTEM__INTERRUPT_CLEAR = 0x15\nconst SYSTEM__FRESH_OUT_OF_RESET = 0x16\nconst I2C_SLAVE__DEVICE_ADDRESS = 0x212\n\n// Initialize sensor with settings from ST application note AN4545, section\n// \"SR03 settings\" - \"Mandatory : private registers\"\nfunction initvl6180() {\n    if (read(SYSTEM__FRESH_OUT_OF_RESET) == 1) {\n        write1Byte(519, 1)\n        write1Byte(520, 1)\n        write1Byte(150, 0)\n        // RANGE_SCALER = 253\n        write1Byte(151, 253)\n        write1Byte(227, 1)\n        write1Byte(228, 3)\n        write1Byte(229, 2)\n        write1Byte(230, 1)\n        write1Byte(231, 3)\n        write1Byte(245, 2)\n        write1Byte(217, 5)\n        write1Byte(219, 206)\n        write1Byte(220, 3)\n        write1Byte(221, 248)\n        write1Byte(159, 0)\n        write1Byte(163, 60)\n        write1Byte(183, 0)\n        write1Byte(187, 60)\n        write1Byte(178, 9)\n        write1Byte(202, 9)\n        write1Byte(408, 1)\n        write1Byte(432, 23)\n        write1Byte(429, 0)\n        write1Byte(255, 5)\n        write1Byte(256, 5)\n        write1Byte(409, 5)\n        write1Byte(422, 27)\n        write1Byte(428, 62)\n        write1Byte(423, 31)\n        write1Byte(48, 0)\n        write1Byte(SYSTEM__FRESH_OUT_OF_RESET, 0)\n    }\n}\n\nfunction write1Byte(reg: number, value: number) {\n    let buf = pins.createBuffer(3)\n    buf.setNumber(NumberFormat.UInt16BE, 0, reg)\n    buf.setNumber(NumberFormat.UInt8BE, 2, value)\n    pins.i2cWriteBuffer(i2caddr, buf)\n}\n\nfunction read(数字: number) {\n    pins.i2cWriteNumber(\n        i2caddr,\n        数字,\n        NumberFormat.UInt16BE,\n        true\n    )\n    return pins.i2cReadNumber(i2caddr, NumberFormat.Int8LE, false)\n}\n\nfunction vl6180Range() {\n    write1Byte(SYSRANGE__START, 1)\n    basic.pause(1000)\n    let ret = read(RESULT__RANGE_VAL)\n    write1Byte(SYSTEM__INTERRUPT_CLEAR, 1)\n    return ret\n}\n","pxt.json":"{\n    \"name\": \"vl6180\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"vl6180.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754213761282,"editorVersion":"8.0.13","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"","README.md":"","vl6180.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * VL6180 blocks\n */\n//% weight=40 color=#D35B53 icon=\"\"\nnamespace VL6180 {\n    /**\n     * TODO: 初始化\n     * @param addr describe parameter here, eg: 5\n     */\n    //% block\n    export function initVL6180(addr: number): void {\n        initVL6180_impl(addr)\n    }\n\n    //% block\n    export function setNewAddr(addr: number, newAddr: number):void {\n        write1Byte(addr, I2C_SLAVE__DEVICE_ADDRESS, newAddr)\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param addr describe value here, eg: 5\n     */\n    //% block\n    export function readRange(addr: number): number {\n        write1Byte(addr, SYSRANGE__START, 1)\n        basic.pause(1000)\n        let ret = read1Byte(addr, RESULT__RANGE_VAL)\n        write1Byte(addr, SYSTEM__INTERRUPT_CLEAR, 1)\n        return ret\n    }\n}\n\nconst SYSRANGE__START = 0x18\nconst RESULT__INTERRUPT_STATUS_GPIO = 0x4F\nconst RESULT__RANGE_VAL = 0x62\nconst SYSTEM__INTERRUPT_CLEAR = 0x15\nconst SYSTEM__FRESH_OUT_OF_RESET = 0x16\nconst I2C_SLAVE__DEVICE_ADDRESS = 0x212\n\n// Initialize sensor with settings from ST application note AN4545, section\n// \"SR03 settings\" - \"Mandatory : private registers\"\nfunction initVL6180_impl(i2caddr: number) {\n    if (read1Byte(i2caddr, SYSTEM__FRESH_OUT_OF_RESET) == 1) {\n        write1Byte(i2caddr, 0x207, 0x01);\n        write1Byte(i2caddr, 0x208, 0x01);\n        write1Byte(i2caddr, 0x096, 0x00);\n        // RANGE_SCALER = 253\n        write1Byte(i2caddr, 0x097, 0xFD);\n        write1Byte(i2caddr, 0x0E3, 0x01);\n        write1Byte(i2caddr, 0x0E4, 0x03);\n        write1Byte(i2caddr, 0x0E5, 0x02);\n        write1Byte(i2caddr, 0x0E6, 0x01);\n        write1Byte(i2caddr, 0x0E7, 0x03);\n        write1Byte(i2caddr, 0x0F5, 0x02);\n        write1Byte(i2caddr, 0x0D9, 0x05);\n        write1Byte(i2caddr, 0x0DB, 0xCE);\n        write1Byte(i2caddr, 0x0DC, 0x03);\n        write1Byte(i2caddr, 0x0DD, 0xF8);\n        write1Byte(i2caddr, 0x09F, 0x00);\n        write1Byte(i2caddr, 0x0A3, 0x3C);\n        write1Byte(i2caddr, 0x0B7, 0x00);\n        write1Byte(i2caddr, 0x0BB, 0x3C);\n        write1Byte(i2caddr, 0x0B2, 0x09);\n        write1Byte(i2caddr, 0x0CA, 0x09);\n        write1Byte(i2caddr, 0x198, 0x01);\n        write1Byte(i2caddr, 0x1B0, 0x17);\n        write1Byte(i2caddr, 0x1AD, 0x00);\n        write1Byte(i2caddr, 0x0FF, 0x05);\n        write1Byte(i2caddr, 0x100, 0x05);\n        write1Byte(i2caddr, 0x199, 0x05);\n        write1Byte(i2caddr, 0x1A6, 0x1B);\n        write1Byte(i2caddr, 0x1AC, 0x3E);\n        write1Byte(i2caddr, 0x1A7, 0x1F);\n        write1Byte(i2caddr, 0x030, 0x00);\n\n        write1Byte(i2caddr, SYSTEM__FRESH_OUT_OF_RESET, 0)\n    }\n}\n\nfunction write1Byte(i2caddr: number, reg: number, value: number) {\n    let buf = pins.createBuffer(3)\n    buf.setNumber(NumberFormat.UInt16BE, 0, reg)\n    buf.setNumber(NumberFormat.UInt8BE, 2, value)\n    pins.i2cWriteBuffer(i2caddr, buf)\n}\n\nfunction read1Byte(i2caddr: number, reg: number) {\n    pins.i2cWriteNumber(\n        i2caddr,\n        reg,\n        NumberFormat.UInt16BE,\n        true\n    )\n    return pins.i2cReadNumber(i2caddr, NumberFormat.Int8LE, false)\n}\n\n","pxt.json":"{\n    \"name\": \"vl6180\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"vl6180.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754219174422,"editorVersion":"8.0.13","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"","README.md":"","vl6180.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * VL6180 blocks\n */\n//% weight=40 color=#D35B53 icon=\"\\uf2db\"\nnamespace VL6180 {\n    /**\n     * TODO: 初始化\n     * @param addr describe parameter here, eg: 5\n     */\n    //% block\n    export function initVL6180(addr: number): void {\n        initVL6180_impl(addr)\n    }\n\n    //% block\n    export function setNewAddr(addr: number, newAddr: number):void {\n        write1Byte(addr, I2C_SLAVE__DEVICE_ADDRESS, newAddr)\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param addr describe value here, eg: 5\n     */\n    //% block\n    export function readRange(addr: number): number {\n        write1Byte(addr, SYSRANGE__START, 1)\n        basic.pause(1000)\n        let ret = read1Byte(addr, RESULT__RANGE_VAL)\n        write1Byte(addr, SYSTEM__INTERRUPT_CLEAR, 1)\n        return ret\n    }\n}\n\nconst SYSRANGE__START = 0x18\nconst RESULT__INTERRUPT_STATUS_GPIO = 0x4F\nconst RESULT__RANGE_VAL = 0x62\nconst SYSTEM__INTERRUPT_CLEAR = 0x15\nconst SYSTEM__FRESH_OUT_OF_RESET = 0x16\nconst I2C_SLAVE__DEVICE_ADDRESS = 0x212\n\n// Initialize sensor with settings from ST application note AN4545, section\n// \"SR03 settings\" - \"Mandatory : private registers\"\nfunction initVL6180_impl(i2caddr: number) {\n    if (read1Byte(i2caddr, SYSTEM__FRESH_OUT_OF_RESET) == 1) {\n        write1Byte(i2caddr, 0x207, 0x01);\n        write1Byte(i2caddr, 0x208, 0x01);\n        write1Byte(i2caddr, 0x096, 0x00);\n        // RANGE_SCALER = 253\n        write1Byte(i2caddr, 0x097, 0xFD);\n        write1Byte(i2caddr, 0x0E3, 0x01);\n        write1Byte(i2caddr, 0x0E4, 0x03);\n        write1Byte(i2caddr, 0x0E5, 0x02);\n        write1Byte(i2caddr, 0x0E6, 0x01);\n        write1Byte(i2caddr, 0x0E7, 0x03);\n        write1Byte(i2caddr, 0x0F5, 0x02);\n        write1Byte(i2caddr, 0x0D9, 0x05);\n        write1Byte(i2caddr, 0x0DB, 0xCE);\n        write1Byte(i2caddr, 0x0DC, 0x03);\n        write1Byte(i2caddr, 0x0DD, 0xF8);\n        write1Byte(i2caddr, 0x09F, 0x00);\n        write1Byte(i2caddr, 0x0A3, 0x3C);\n        write1Byte(i2caddr, 0x0B7, 0x00);\n        write1Byte(i2caddr, 0x0BB, 0x3C);\n        write1Byte(i2caddr, 0x0B2, 0x09);\n        write1Byte(i2caddr, 0x0CA, 0x09);\n        write1Byte(i2caddr, 0x198, 0x01);\n        write1Byte(i2caddr, 0x1B0, 0x17);\n        write1Byte(i2caddr, 0x1AD, 0x00);\n        write1Byte(i2caddr, 0x0FF, 0x05);\n        write1Byte(i2caddr, 0x100, 0x05);\n        write1Byte(i2caddr, 0x199, 0x05);\n        write1Byte(i2caddr, 0x1A6, 0x1B);\n        write1Byte(i2caddr, 0x1AC, 0x3E);\n        write1Byte(i2caddr, 0x1A7, 0x1F);\n        write1Byte(i2caddr, 0x030, 0x00);\n\n        write1Byte(i2caddr, SYSTEM__FRESH_OUT_OF_RESET, 0)\n    }\n}\n\nfunction write1Byte(i2caddr: number, reg: number, value: number) {\n    let buf = pins.createBuffer(3)\n    buf.setNumber(NumberFormat.UInt16BE, 0, reg)\n    buf.setNumber(NumberFormat.UInt8BE, 2, value)\n    pins.i2cWriteBuffer(i2caddr, buf)\n}\n\nfunction read1Byte(i2caddr: number, reg: number) {\n    pins.i2cWriteNumber(\n        i2caddr,\n        reg,\n        NumberFormat.UInt16BE,\n        true\n    )\n    return pins.i2cReadNumber(i2caddr, NumberFormat.Int8LE, false)\n}\n\n","pxt.json":"{\n    \"name\": \"vl6180\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"vl6180.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754221058540,"editorVersion":"8.0.13","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"","README.md":"","vl6180.ts":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * VL6180 blocks\n */\n//% weight=40 color=#D35B53 icon=\"\\uf2db\"\nnamespace VL6180 {\n    /**\n     * 初始化\n     * @param addr vl6180 7-bit i2c 地址, eg: 0x29\n     */\n    //%  addr.min=0x07 addr.max=0x77 addr.defl=0x29 block=\"初始化地址为 %addr 的VL6180\"\n    //% weight=100\n    export function initVL6180(addr: number): void {\n        initVL6180_impl(addr)\n    }\n\n    /**\n     * 设置新地址，重新上电后重置为 0x29\n     * @param addr vl6180 7-bit i2c 当前地址, eg: 0x29\n     * @param newAddr 计划新设置的 7-bit i2c 地址\n     */\n    //%  addr.min=0x07 addr.max=0x77 addr.defl=0x29 \n    //%  newAddr.min=0x07 addr.newAddr=0x77\n    //% block=\"设置在地址 %addr 的VL6180 | 新地址为 %newAddr\"\n    //% weight=10\n    export function setNewAddr(addr: number, newAddr: number):void {\n        write1Byte(addr, I2C_SLAVE__DEVICE_ADDRESS, newAddr)\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param addr describe value here, eg: 5\n     */\n    //% block\n    export function readRange(addr: number): number {\n        write1Byte(addr, SYSRANGE__START, 1)\n        basic.pause(1000)\n        let ret = read1Byte(addr, RESULT__RANGE_VAL)\n        write1Byte(addr, SYSTEM__INTERRUPT_CLEAR, 1)\n        return ret\n    }\n}\n\nconst SYSRANGE__START = 0x18\nconst RESULT__INTERRUPT_STATUS_GPIO = 0x4F\nconst RESULT__RANGE_VAL = 0x62\nconst SYSTEM__INTERRUPT_CLEAR = 0x15\nconst SYSTEM__FRESH_OUT_OF_RESET = 0x16\nconst I2C_SLAVE__DEVICE_ADDRESS = 0x212\n\n// Initialize sensor with settings from ST application note AN4545, section\n// \"SR03 settings\" - \"Mandatory : private registers\"\nfunction initVL6180_impl(i2caddr: number) {\n    if (read1Byte(i2caddr, SYSTEM__FRESH_OUT_OF_RESET) == 1) {\n        write1Byte(i2caddr, 0x207, 0x01);\n        write1Byte(i2caddr, 0x208, 0x01);\n        write1Byte(i2caddr, 0x096, 0x00);\n        // RANGE_SCALER = 253\n        write1Byte(i2caddr, 0x097, 0xFD);\n        write1Byte(i2caddr, 0x0E3, 0x01);\n        write1Byte(i2caddr, 0x0E4, 0x03);\n        write1Byte(i2caddr, 0x0E5, 0x02);\n        write1Byte(i2caddr, 0x0E6, 0x01);\n        write1Byte(i2caddr, 0x0E7, 0x03);\n        write1Byte(i2caddr, 0x0F5, 0x02);\n        write1Byte(i2caddr, 0x0D9, 0x05);\n        write1Byte(i2caddr, 0x0DB, 0xCE);\n        write1Byte(i2caddr, 0x0DC, 0x03);\n        write1Byte(i2caddr, 0x0DD, 0xF8);\n        write1Byte(i2caddr, 0x09F, 0x00);\n        write1Byte(i2caddr, 0x0A3, 0x3C);\n        write1Byte(i2caddr, 0x0B7, 0x00);\n        write1Byte(i2caddr, 0x0BB, 0x3C);\n        write1Byte(i2caddr, 0x0B2, 0x09);\n        write1Byte(i2caddr, 0x0CA, 0x09);\n        write1Byte(i2caddr, 0x198, 0x01);\n        write1Byte(i2caddr, 0x1B0, 0x17);\n        write1Byte(i2caddr, 0x1AD, 0x00);\n        write1Byte(i2caddr, 0x0FF, 0x05);\n        write1Byte(i2caddr, 0x100, 0x05);\n        write1Byte(i2caddr, 0x199, 0x05);\n        write1Byte(i2caddr, 0x1A6, 0x1B);\n        write1Byte(i2caddr, 0x1AC, 0x3E);\n        write1Byte(i2caddr, 0x1A7, 0x1F);\n        write1Byte(i2caddr, 0x030, 0x00);\n\n        write1Byte(i2caddr, SYSTEM__FRESH_OUT_OF_RESET, 0)\n    }\n}\n\nfunction write1Byte(i2caddr: number, reg: number, value: number) {\n    let buf = pins.createBuffer(3)\n    buf.setNumber(NumberFormat.UInt16BE, 0, reg)\n    buf.setNumber(NumberFormat.UInt8BE, 2, value)\n    pins.i2cWriteBuffer(i2caddr, buf)\n}\n\nfunction read1Byte(i2caddr: number, reg: number) {\n    pins.i2cWriteNumber(\n        i2caddr,\n        reg,\n        NumberFormat.UInt16BE,\n        true\n    )\n    return pins.i2cReadNumber(i2caddr, NumberFormat.Int8LE, false)\n}\n\n","pxt.json":"{\n    \"name\": \"vl6180\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"vl6180.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1754221405527}